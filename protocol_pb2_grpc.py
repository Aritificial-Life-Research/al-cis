# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import protocol_pb2 as protocol__pb2


class CellInteractionServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ComputeCellInteractions = channel.unary_unary(
        '/proto.CellInteractionService/ComputeCellInteractions',
        request_serializer=protocol__pb2.CellComputeBatch.SerializeToString,
        response_deserializer=protocol__pb2.CellComputeBatch.FromString,
        )
    self.BigBang = channel.unary_stream(
        '/proto.CellInteractionService/BigBang',
        request_serializer=protocol__pb2.BigBangRequest.SerializeToString,
        response_deserializer=protocol__pb2.Cell.FromString,
        )


class CellInteractionServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ComputeCellInteractions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BigBang(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CellInteractionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ComputeCellInteractions': grpc.unary_unary_rpc_method_handler(
          servicer.ComputeCellInteractions,
          request_deserializer=protocol__pb2.CellComputeBatch.FromString,
          response_serializer=protocol__pb2.CellComputeBatch.SerializeToString,
      ),
      'BigBang': grpc.unary_stream_rpc_method_handler(
          servicer.BigBang,
          request_deserializer=protocol__pb2.BigBangRequest.FromString,
          response_serializer=protocol__pb2.Cell.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'proto.CellInteractionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SlaveRegistrationServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Register = channel.unary_unary(
        '/proto.SlaveRegistrationService/Register',
        request_serializer=protocol__pb2.SlaveRegistration.SerializeToString,
        response_deserializer=protocol__pb2.SlaveRegistrationResponse.FromString,
        )


class SlaveRegistrationServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SlaveRegistrationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=protocol__pb2.SlaveRegistration.FromString,
          response_serializer=protocol__pb2.SlaveRegistrationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'proto.SlaveRegistrationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
